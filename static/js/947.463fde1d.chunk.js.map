{"version":3,"file":"static/js/947.463fde1d.chunk.js","mappings":"wNA8BA,UA3BA,YAA4B,IAAZA,EAAW,EAAXA,QACd,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAYA,OAVAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,wFACpBL,EADoB,iCAEAM,EAAAA,EAAAA,IAAgBN,GAFhB,OAEhBO,EAFgB,OAGtBJ,EAAQI,GAHc,2CAAH,qDAMvBF,GACD,GAAE,CAACL,KAGF,4BACE,iCACCE,EAAKM,KAAI,SAACC,GAAD,OACR,4BACE,gBAAKC,IAAG,yCAAoCD,EAAME,cAAgBC,IAAKH,EAAMI,QAC7E,kCAAUJ,EAAMI,SAChB,kCAAUJ,EAAMK,eAHRL,EAAMM,GADR,MASf,C,2HCqCD,UA3DA,WACE,IAAMC,GAAWC,EAAAA,EAAAA,MAEXjB,GADWkB,EAAAA,EAAAA,MACQC,SAASC,MAAM,KAAK,GAC7C,GAA0BnB,EAAAA,EAAAA,UAAS,MAAnC,eAAOoB,EAAP,KAAcC,EAAd,KACA,GAAsCrB,EAAAA,EAAAA,UAAS,MAA/C,eAAOsB,EAAP,KAAoBC,EAApB,MAEApB,EAAAA,EAAAA,YAAU,WACR,IAAMqB,EAAiB,mCAAG,qGACJC,EAAAA,EAAAA,IAAgB1B,GADZ,OAClBqB,EADkB,OAExBC,EAASD,GAFe,2CAAH,qDAIvBI,GACD,GAAE,CAACzB,IAEJ,IAIM2B,EAAiB,SAACC,GACtBJ,EAAeI,EAChB,EAED,OAAKP,GAKH,4BACE,mBAAQQ,QAdG,WACbb,GAAU,EACX,EAYG,sBACA,0BAAKK,EAAMS,MAAX,KAAoBT,EAAMU,cAAgBV,EAAMU,aAAaX,MAAM,KAAK,GAAxE,QACA,gBAAKV,IAAG,yCAAoCW,EAAMW,aAAepB,IAAKS,EAAMS,SAC5E,wCAAqC,GAArBT,EAAMY,aAAtB,QACA,sCAAcZ,EAAMa,aACpB,oCAAYb,EAAMc,OAAO3B,KAAI,SAAA4B,GAAK,OAAIA,EAAMvB,IAAV,IAAgBwB,KAAK,UAEvD,4BACE,mDACA,mBAAQR,QAAS,kBAAMF,EAAe,OAArB,EAAjB,mBACA,mBAAQE,QAAS,kBAAMF,EAAe,UAArB,EAAjB,yBAGF,2BACmB,SAAhBJ,IACC,0BACE,SAAC,UAAD,CAAMvB,QAASA,MAIF,YAAhBuB,IACC,0BACE,SAAC,UAAD,CAASvB,QAASA,aA3BnB,uCAiCV,C,gGC9BD,UA9BA,YAA+B,IAAZA,EAAW,EAAXA,QACjB,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOqC,EAAP,KAAgBC,EAAhB,KAYA,OAVAnC,EAAAA,EAAAA,YAAU,WACR,IAAMoC,EAAiB,mCAAG,wFACpBxC,EADoB,iCAEAyC,EAAAA,EAAAA,IAAgBzC,GAFhB,OAEhBsC,EAFgB,OAGtBC,EAAWD,GAHW,2CAAH,qDAMvBE,GACD,GAAE,CAACxC,KAGF,4BACE,oCACCsC,EAAQI,OAAS,EAChBJ,EAAQ9B,KAAI,SAACmC,GAAD,OACV,4BACE,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFHF,EAAO5B,GADP,KAOZ,+CAIP,C","sources":["components/Cast/Cast.jsx","components/MovieDetails/MovieDetails.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getMovieCredits } from '../api/api';\n\nfunction Cast({ movieId }) {\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieCredits = async () => {\n      if (movieId) {\n        const credits = await getMovieCredits(movieId);\n        setCast(credits);\n      }\n    };\n    fetchMovieCredits();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h1>Cast</h1>\n      {cast.map((actor) => (\n        <div key={actor.id}>\n          <img src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`} alt={actor.name} />\n          <p>Name: {actor.name}</p>\n          <p>Role: {actor.character}</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Cast;\n","import React, { useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { getMovieDetails } from '../api/api';\nimport Cast from '../Cast/Cast';\nimport Reviews from '../Reviews/Reviews';\n\nfunction MovieDetails() {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const movieId = location.pathname.split('/')[2];\n  const [movie, setMovie] = useState(null);\n  const [selectedTab, setSelectedTab] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      const movie = await getMovieDetails(movieId);\n      setMovie(movie);\n    };\n    fetchMovieDetails();\n  }, [movieId]);\n\n  const goBack = () => {\n    navigate(-1);\n  };\n\n  const handleTabClick = (tab) => {\n    setSelectedTab(tab);\n  };\n\n  if (!movie) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <button onClick={goBack}>Go back</button>\n      <h1>{movie.title} ({movie.release_date && movie.release_date.split('-')[0]})</h1>\n      <img src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} alt={movie.title} />\n      <p>User Score: {movie.vote_average * 10}%</p>\n      <p>Overview: {movie.overview}</p>\n      <p>Genres: {movie.genres.map(genre => genre.name).join(', ')}</p>\n\n      <div>\n        <p>Additional information</p>\n        <button onClick={() => handleTabClick('cast')}>Cast</button>\n        <button onClick={() => handleTabClick('reviews')}>Reviews</button>\n      </div>\n\n      <div>\n        {selectedTab === 'cast' && (\n          <div>\n            <Cast movieId={movieId} />\n          </div>\n        )}\n\n        {selectedTab === 'reviews' && (\n          <div>\n            <Reviews movieId={movieId} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default MovieDetails;\n","import React, { useEffect, useState } from 'react';\nimport { getMovieReviews } from '../api/api';\n\nfunction Reviews({ movieId }) {\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      if (movieId) {\n        const reviews = await getMovieReviews(movieId);\n        setReviews(reviews);\n      }\n    };\n    fetchMovieReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h1>Reviews</h1>\n      {reviews.length > 0 ? (\n        reviews.map((review) => (\n          <div key={review.id}>\n            <h3>{review.author}</h3>\n            <p>{review.content}</p>\n          </div>\n        ))\n      ) : (\n        <p>Reviews not found</p>\n      )}\n    </div>\n  );\n}\n\nexport default Reviews;\n"],"names":["movieId","useState","cast","setCast","useEffect","fetchMovieCredits","getMovieCredits","credits","map","actor","src","profile_path","alt","name","character","id","navigate","useNavigate","useLocation","pathname","split","movie","setMovie","selectedTab","setSelectedTab","fetchMovieDetails","getMovieDetails","handleTabClick","tab","onClick","title","release_date","poster_path","vote_average","overview","genres","genre","join","reviews","setReviews","fetchMovieReviews","getMovieReviews","length","review","author","content"],"sourceRoot":""}